# Строки
# Со строками можно обращаться так же, как и с массивами
# Можно воспринимать строку, как массив символов
# Так мы можем, например, узнать, какой символ находится под определенным индексом

a = 'abacaba'
print(a[1], a[3])
#b c

# Можем конкатенировать (соединять) строки

a = 'aba'
b = 'caba'
c = a + b
print(c)
#abacaba

# Узнать длину строки можем с помощью функции len()

a = 'abacaba'
print(len(a))
#7

# Slices
# С помощью слайсов мы можем брать некоторую подстроку по нужным нам индексам

a = 'abacaba'
print(a[1:4])
#bac

# Здесь берется подстрока с первого аргумента включительно по второй не включительно

# Также мы можем проверять не лежит ли какая-нибудь подстрока в в данной строке с помощью ключевого слова in

a = 'abacaba'
print('aca' in a)
print('kek' in a)
#True
#False

# Если мы хотим сконкатенировать много значений при выводе, то мы можем воспользоваться следующим функционалом

a = 1
b = 2.1
c = 'lol'
print("a = %i b = %f c = %s" % (a, b, c))
#a = 1 b = 2.1 c = lol

# Здесь в данную строку подставятся значения, которые следуют в скобках после %
# В самой строке мы используем следующие обозначения, чтобы обозначить, куда вставлять нашу переменную
# %i для целочисленных значений
# %f для значений плавующей точкой
# %s для строковых значений

# Функции
# Если мы хотим использовать некоторые куски кода несколько раз в программе, то целесообразнее будет вынести их в отдельные функции
# Они обозначаются через ключевое слово def

def greeting(name):
	print('Hello, ' + name)

greeting('Bob')
greeting('Tom')

#Hello, Bob
#Hello, Tom

# Можно понимать так, что мы просто вставляем кусок кода, лежащий в функции, на то место, где мы вызываем данную функцию
# Также функция может и возвращать некоторые значения

def multiply(a, b):
	return a * b

print(multiply(3, 4))
#12

# Dictionary
# Когда мы используем массив, то мы можем обращаться к элементам по индексам
# Но в качестве индексов мы можем использовать только целочисленные значения
# Для того, чтобы использовать в качестве индексов другие типы данных, есть dictionary

# Объявление

a = {}
a = dict()
# два эквивалентных объявления

count = {}

count['a'] = 0
count['b'] = 0
s = 'abacabadabacaba'
for c in s:
	if c == 'a':
		count['a'] += 1
	elif c == 'b':
		count['b'] += 1

print(count['a'], count['b'])
#8 4

# Здесь показаны далеко не все возможности строк, функций и словарей, но для решения некоторых задач этого уже достаточно.
# В дольнейшем мы рассмотрим функционал всего этого более детально