# Цикл while
# Объявление цикла:

a = 5
while a > 0:
	print(a)
	a -= 1
#5
#4
#3
#2
#1

# После ключевого слова while следует условие, которое будет проверяться перед каждым "прогоном" цикла
# Тело цикла будет выполняться, пока условие возвращает True
# Замечание: всегда стоит проверять, не получается ли так, что условие выполняется всегда, иначе наш цикл будет выполняться бесконечное количество раз

# Цикл for
# Объявление цикла:

for i in range(0, 5, 1):
	print(i)
#0
#1
#2
#3
#4

# После ключевого слова for следует название переменной, которую мы будем использовать в цикле, далее следует ключевое слово in и функция range(), которая принимает 3 параметра:
# 1) стартовое значение
# 2) конечное значение
# 3) размер шага
# Переменная, которую мы указали будет на каждой итерации цикла менять своё значение со стартового включительно до конечного не включительно с указанным шагом
# Замечание: функция range() может так же принимать 1 или 2 аргумента. При одном аргументе стартовое значение по дефолту будет 0, а шаг 1. При двух аргументах по дефолту будет только шаг.
# Примеры:

for i in range(3, 7):
	print(i)
#3
#4
#5
#6

for i in range(3):
	print(i)
#0
#1
#2

# Ключевые слова break и continue
# Если мы хотим, чтобы при каком-то условии дальнейшие операции в цикле не выполнялись на этой итерации (читай: при определенном условии перейти к следующей итерации), мы используем команду continue

for i in range(10):
	if i % 2 == 0:
		continue
	print(i)
#1
#3
#5
#7
#9

# Если мы хотим при каком-то условии прекратить выполнение цикла, мы используем команду break.
# Замечание: Эту команду можно использовать, чтобы избегать бесконечных циклов

a = 1
while True:
	if a > 5:
		break
	print(a)
#1
#2
#3
#4
#5

# Замечание: Эти ключевые слова можно использовать в обоих типах циклов.


# Массивы
# Когда мы хотим держать большое количество значений в одной переменной, мы используем мыссивы
# Есть два эквивалентных варианта объявления массива:

# Вариант 1
a = list()
# Вариант 2
a = []

#Если мы используем второй вариант, то можем сразу же закинуть в массив нужные нам значения:

a = [1, 2, 3, 4, 5]

# Теперь разберемся с тем, как считать массив, если он нам весь дан в одной строке:

a = list(map(int, input().split()))
print(a)
#>1 2 3 4 5
#[1, 2, 3, 4, 5]

# Разберём всё по порядку:
# 1) input().split() - считываем всё, как строку и разделяем её по пробелам. Получаем что-то такое: ['1', '2', '3', '4', '5']
# 2) map(int, input().split()) - применим к каждому элементу массива, получившемуся на первом шаге функцию int() с помощью функции map()
# 3) На шаге 2 мы получили некоторый объякт. Чтобы мы могли с ним удобно работать, надо привести его к типу массива с помощью функции list()

# У каждого элемента массива есть свой номер (индекс), начинающийся с 0, к которому можно обращаться через квадратные скобки
# Вот так, например, можно вывести все элементы массива:

a = [5, 4, 3, 2, 1]
for i in range(len(a)): # Здесь функция len() возвращает длину массива
	print(a[i])
#5
#4
#3
#2
#1

# Замечание: используя цикл for, вместо функции range() мы можем использовать массив, тогда переменная, которую мы указали, будет принимать значения элементов массива

a = [2, 4, 6, 8]
for element in a:
	print(element)
#2
#4
#6
#8

# Добавление элементов в массив
# Чтобы добавивть элемент в конец массива, используем матод append()

a = []
for i in range(1, 10, 2):
	a.append(i)
print(a)
#[1, 3, 5, 7, 9]


# Многомерные массивы
# Элементом массива может быть совершенно любой элемент (даже другой массив)

a = []
for i in range(5):
	tmp = []
	for j in range(5):
		tmp.append(j)
	a.append(tmp)
print(a)
#[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4]]